import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import plotly.graph_objects as go
from datetime import datetime, timedelta
import traceback
import io
import logging

# Config ve error handling
from config import API_KEYS, ML_MODEL_PARAMS, FORECAST_PERIODS, STOCK_ANALYSIS_WINDOWS
from utils.error_handler import handle_api_error, handle_analysis_error, log_exception, show_error_message

# Yapay zeka modÃ¼llerini ekle
from ai.api import initialize_gemini_api
from data.ai_functions import (
    ai_market_sentiment, 
    ai_stock_analysis,
    ai_price_prediction,
    ai_sector_analysis,
    ai_portfolio_recommendation,
    ai_technical_interpretation,
    load_gemini_pro
)

# Veri ve analiz modÃ¼llerinden gerekli fonksiyonlarÄ± ekle
from data.stock_data import get_stock_data, get_company_info
from data.news_data import get_stock_news
from analysis.indicators import calculate_indicators
from analysis.charts import create_stock_chart
from data.db_utils import save_analysis_result

# Loglama yapÄ±landÄ±rmasÄ±
logger = logging.getLogger(__name__)

def render_ai_tab():
    """
    Yapay Zeka sekmesini oluÅŸturur
    """
    st.header("Yapay Zeka Analizleri", divider="rainbow")
    
    # Ä°ÅŸlem gÃ¼nlÃ¼ÄŸÃ¼ expander'Ä± - varsayÄ±lan olarak kapalÄ±
    log_expander = st.expander("Ä°ÅŸlem GÃ¼nlÃ¼ÄŸÃ¼ (Detaylar iÃ§in tÄ±klayÄ±n)", expanded=False)
    
    # Gemini API'yi baÅŸlat - Config'den API key al
    try:
        gemini_api_key = API_KEYS.get("GEMINI_API_KEY", "")
        if not gemini_api_key:
            st.error("Gemini API anahtarÄ± yapÄ±landÄ±rÄ±lmamÄ±ÅŸ. Config dosyasÄ±nÄ± kontrol edin.")
            with log_expander:
                st.error("GEMINI_API_KEY config'de bulunamadÄ±.")
            return
            
        gemini_pro = initialize_gemini_api()
        if gemini_pro is None:
            st.warning("Yapay zeka servisi ÅŸu anda kullanÄ±lamÄ±yor. LÃ¼tfen daha sonra tekrar deneyin.")
            with log_expander:
                st.warning("Gemini API baÅŸlatÄ±lamadÄ±.")
            return
            
    except Exception as e:
        log_exception(e, "Gemini API baÅŸlatÄ±lÄ±rken hata")
        st.error("Yapay zeka servisi baÅŸlatÄ±lamadÄ±.")
        with log_expander:
            st.error(f"API baÅŸlatma hatasÄ±: {str(e)}")
        return
    
    # AI sekmeleri
    ai_tabs = st.tabs(["ğŸ”® Piyasa DuyarlÄ±lÄ±ÄŸÄ±", "ğŸ§  Hisse Analizi", "ğŸ“ˆ Fiyat Tahmini", 
                        "ğŸ“Š SektÃ¶r Analizi", "ğŸ’° PortfÃ¶y Ã–nerileri", "ğŸ“‰ Teknik Analiz"])
    
    with ai_tabs[0]:
        st.subheader("Piyasa Genel DuyarlÄ±lÄ±ÄŸÄ±")
        st.markdown("Bu bÃ¶lÃ¼mde yapay zeka, piyasanÄ±n genel durumunu analiz eder ve yatÄ±rÄ±mcÄ± duyarlÄ±lÄ±ÄŸÄ±nÄ± deÄŸerlendirir.")
        
        if st.button("Piyasa DuyarlÄ±lÄ±ÄŸÄ± Analizi", type="primary", key="market_sentiment"):
            try:
                # Log mesajlarÄ±nÄ± expander'a yÃ¶nlendir
                with log_expander:
                    st.info("Piyasa DuyarlÄ±lÄ±ÄŸÄ± Analizi baÅŸlatÄ±lÄ±yor...")
                
                # Spinner yerine container kullan, bÃ¶ylece tÃ¼m iÃ§erik daha dÃ¼zenli gÃ¶rÃ¼nÃ¼r
                result_container = st.container()
                
                # Minimal spinner
                with st.spinner(""):
                    # AI analizi - standart Ã§aÄŸrÄ±
                    try:
                        sentiment_result = ai_market_sentiment(gemini_pro)
                        
                        # Return deÄŸerini kontrol et - tuple mu string mi?
                        if isinstance(sentiment_result, tuple):
                            sentiment_text, sentiment_data = sentiment_result
                        else:
                            sentiment_text = sentiment_result
                            sentiment_data = None
                            
                    except Exception as ai_error:
                        log_exception(ai_error, "AI market sentiment analizi sÄ±rasÄ±nda hata")
                        with log_expander:
                            st.error(f"AI analiz hatasÄ±: {str(ai_error)}")
                        sentiment_text = "Piyasa duyarlÄ±lÄ±ÄŸÄ± analizi ÅŸu anda yapÄ±lamÄ±yor. LÃ¼tfen daha sonra tekrar deneyin."
                        sentiment_data = None
                    
                    # Temiz bir format iÃ§inde metni gÃ¶ster
                    with result_container:
                        st.markdown(f"""
                        <div style="background-color:#f0f7ff; padding:15px; border-radius:10px; border-left:5px solid #0066ff; margin-top:10px;">
                        {sentiment_text}
                        </div>
                        """, unsafe_allow_html=True)
                        
                        # EÄŸer fallback sonuÃ§lar varsa (API baÄŸlantÄ±sÄ± yoksa), gÃ¶rselleri gÃ¶ster
                        if sentiment_data:
                            st.markdown("<div style='height:15px;'></div>", unsafe_allow_html=True)  # Daha az boÅŸluk
                            
                            # SÃ¼tunlarÄ± tanÄ±mla
                            col1, col2, col3, col4, col5 = st.columns(5)
                            
                            # Piyasa DuyarlÄ±lÄ±ÄŸÄ±
                            with col1:
                                try:
                                    mood = sentiment_data.get('market_mood', 'NÃ¶tr')  # VarsayÄ±lan deÄŸer 'NÃ¶tr'
                                    mood_color = "green" if mood == "Olumlu" else ("red" if mood == "Olumsuz" else "orange")
                                    st.markdown(f"<h4 style='text-align:center; color:{mood_color}; font-size:1.1em;'>{mood}</h4>", unsafe_allow_html=True)
                                    st.markdown("<p style='text-align:center; font-size:0.9em;'>Piyasa DuyarlÄ±lÄ±ÄŸÄ±</p>", unsafe_allow_html=True)
                                except Exception as e:
                                    st.markdown("<h4 style='text-align:center; color:orange; font-size:1.1em;'>NÃ¶tr</h4>", unsafe_allow_html=True)
                                    st.markdown("<p style='text-align:center; font-size:0.9em;'>Piyasa DuyarlÄ±lÄ±ÄŸÄ±</p>", unsafe_allow_html=True)
                                    with log_expander:
                                        st.error(f"Piyasa duyarlÄ±lÄ±ÄŸÄ± deÄŸerinde hata: {str(e)}")
                            
                            # GÃ¼ven OranÄ±
                            with col2:
                                try:
                                    confidence = sentiment_data.get('confidence', 75)  # VarsayÄ±lan deÄŸer 75
                                    confidence_color = "green" if confidence > 75 else ("orange" if confidence > 50 else "red")
                                    st.markdown(f"<h4 style='text-align:center; color:{confidence_color}; font-size:1.1em;'>%{confidence}</h4>", unsafe_allow_html=True)
                                    st.markdown("<p style='text-align:center; font-size:0.9em;'>GÃ¼ven OranÄ±</p>", unsafe_allow_html=True)
                                except Exception as e:
                                    st.markdown("<h4 style='text-align:center; color:orange; font-size:1.1em;'>%75</h4>", unsafe_allow_html=True)
                                    st.markdown("<p style='text-align:center; font-size:0.9em;'>GÃ¼ven OranÄ±</p>", unsafe_allow_html=True)
                                    with log_expander:
                                        st.error(f"GÃ¼ven oranÄ± deÄŸerinde hata: {str(e)}")
                            
                            # Trend GÃ¼cÃ¼
                            with col3:
                                try:
                                    strength = sentiment_data.get('trend_strength', 50)  # VarsayÄ±lan deÄŸer 50
                                    strength_color = "green" if strength > 70 else ("orange" if strength > 40 else "red")
                                    st.markdown(f"<h4 style='text-align:center; color:{strength_color}; font-size:1.1em;'>%{strength}</h4>", unsafe_allow_html=True)
                                    st.markdown("<p style='text-align:center; font-size:0.9em;'>Trend GÃ¼cÃ¼</p>", unsafe_allow_html=True)
                                except Exception as e:
                                    st.markdown("<h4 style='text-align:center; color:orange; font-size:1.1em;'>%50</h4>", unsafe_allow_html=True)
                                    st.markdown("<p style='text-align:center; font-size:0.9em;'>Trend GÃ¼cÃ¼</p>", unsafe_allow_html=True)
                                    with log_expander:
                                        st.error(f"Trend gÃ¼cÃ¼ deÄŸerinde hata: {str(e)}")
                            
                            # Beklenen Volatilite
                            with col4:
                                try:
                                    volatility = sentiment_data.get('volatility_expectation', 'Orta')  # VarsayÄ±lan deÄŸer 'Orta'
                                    volatility_color = "green" if volatility == "DÃ¼ÅŸÃ¼k" else ("red" if volatility == "YÃ¼ksek" else "orange")
                                    st.markdown(f"<h4 style='text-align:center; color:{volatility_color}; font-size:1.1em;'>{volatility}</h4>", unsafe_allow_html=True)
                                    st.markdown("<p style='text-align:center; font-size:0.9em;'>Beklenen Volatilite</p>", unsafe_allow_html=True)
                                except Exception as e:
                                    st.markdown("<h4 style='text-align:center; color:orange; font-size:1.1em;'>Orta</h4>", unsafe_allow_html=True)
                                    st.markdown("<p style='text-align:center; font-size:0.9em;'>Beklenen Volatilite</p>", unsafe_allow_html=True)
                                    with log_expander:
                                        st.error(f"Volatilite deÄŸerinde hata: {str(e)}")
                            
                            # Tavsiye
                            with col5:
                                try:
                                    recommendation = sentiment_data.get('overall_recommendation', 'Tut')  # VarsayÄ±lan deÄŸer 'Tut'
                                    rec_color = "green" if recommendation == "Al" else ("red" if recommendation == "Sat" else "orange")
                                    st.markdown(f"<h4 style='text-align:center; color:{rec_color}; font-size:1.1em;'>{recommendation}</h4>", unsafe_allow_html=True)
                                    st.markdown("<p style='text-align:center; font-size:0.9em;'>Tavsiye</p>", unsafe_allow_html=True)
                                except Exception as e:
                                    st.markdown("<h4 style='text-align:center; color:orange; font-size:1.1em;'>Tut</h4>", unsafe_allow_html=True)
                                    st.markdown("<p style='text-align:center; font-size:0.9em;'>Tavsiye</p>", unsafe_allow_html=True)
                                    with log_expander:
                                        st.error(f"Tavsiye deÄŸerinde hata: {str(e)}")
            except Exception as e:
                st.error(f"Piyasa duyarlÄ±lÄ±ÄŸÄ± analizi sÄ±rasÄ±nda bir hata oluÅŸtu: {str(e)}")
                with log_expander:
                    st.error(f"Hata detayÄ±: {str(e)}")
    
    with ai_tabs[1]:
        st.subheader("Hisse Senedi Analizi")
        st.markdown("SeÃ§tiÄŸiniz hisse senedi iÃ§in yapay zeka detaylÄ± analiz yapar.")
        
        # Config'den default stock al
        default_stock = ML_MODEL_PARAMS.get("default_stock", "THYAO")
        if not default_stock.endswith('.IS'):
            default_stock += '.IS'
            
        stock_symbol = st.text_input("Hisse Senedi SembolÃ¼", value=default_stock, key="ai_stock_symbol")
        stock_symbol = stock_symbol.upper()
        if not stock_symbol.endswith('.IS') and not stock_symbol == "":
            stock_symbol += '.IS'
        
        if st.button("Hisse Analizi", type="primary", key="stock_analysis"):
            results_container = st.container()
            
            # Log mesajlarÄ±nÄ± expander'a yÃ¶nlendir
            with log_expander:
                st.info(f"{stock_symbol} iÃ§in yapay zeka analizi yapÄ±lÄ±yor...")
            
            with st.spinner(""):
                try:
                    # Hisse verilerini al - Config'den period kullan
                    data_period = FORECAST_PERIODS.get("6ay", {}).get("period", "6mo")
                    stock_data = get_stock_data(stock_symbol, period=data_period)
                    
                    with log_expander:
                        st.info(f"Hisse verileri alÄ±ndÄ± ({data_period}), analiz yapÄ±lÄ±yor...")
                    
                    if stock_data is not None and not stock_data.empty:
                        # GÃ¶stergeleri hesapla
                        try:
                            stock_data_with_indicators = calculate_indicators(stock_data)
                            with log_expander:
                                st.info("GÃ¶stergeler hesaplandÄ±, YZ analizi baÅŸlatÄ±lÄ±yor...")
                            # Analizi Ã§alÄ±ÅŸtÄ±r
                            try:
                                analysis_result = ai_stock_analysis(gemini_pro, stock_symbol, stock_data_with_indicators)
                                # Return deÄŸerini kontrol et
                                if not analysis_result or analysis_result.strip() == "":
                                    analysis_result = f"{stock_symbol} iÃ§in AI analizi tamamlanamadÄ±. LÃ¼tfen daha sonra tekrar deneyin."
                            except Exception as ai_error:
                                log_exception(ai_error, "AI hisse analizi sÄ±rasÄ±nda hata")
                                with log_expander:
                                    st.error(f"AI analiz hatasÄ±: {str(ai_error)}")
                                analysis_result = f"{stock_symbol} iÃ§in AI analizi ÅŸu anda yapÄ±lamÄ±yor. Temel teknik analiz sonuÃ§larÄ± aÅŸaÄŸÄ±da gÃ¶sterilmektedir."
                        except Exception as indicator_error:
                            log_exception(indicator_error, "GÃ¶stergeler hesaplanÄ±rken hata")
                            with log_expander:
                                st.error(f"GÃ¶sterge hesaplama hatasÄ±: {str(indicator_error)}")
                            raise
                        # SonuÃ§larÄ± gÃ¶ster - sonuÃ§larÄ± results_container iÃ§inde gÃ¶ster
                        with results_container:
                            st.markdown(f"""
                            <div style="background-color:#f0f7ff; padding:15px; border-radius:10px; border-left:5px solid #0066ff; margin-top:10px;">
                            {analysis_result}
                            </div>
                            """, unsafe_allow_html=True)
                            # GrafiÄŸi gÃ¶ster
                            try:
                                fig = create_stock_chart(stock_data_with_indicators, stock_symbol)
                                st.plotly_chart(fig, use_container_width=True)
                            except Exception as chart_error:
                                log_exception(chart_error, "Grafik oluÅŸturulurken hata")
                                with log_expander:
                                    st.error(f"Grafik oluÅŸturma hatasÄ±: {str(chart_error)}")
                                st.warning("Grafik gÃ¶sterilemedi, ancak analiz tamamlandÄ±.")
                            # Analiz sonuÃ§larÄ±nÄ± kaydet
                            company_info = get_company_info(stock_symbol)
                            last_price = stock_data['Close'].iloc[-1]
                            price_change = (stock_data['Close'].iloc[-1] - stock_data['Close'].iloc[-2]) / stock_data['Close'].iloc[-2] * 100
                            # Basit trend tespiti
                            if stock_data['Close'].iloc[-1] > stock_data['SMA20'].iloc[-1]:
                                trend_direction = "YÃ¼kseliÅŸ"
                            else:
                                trend_direction = "DÃ¼ÅŸÃ¼ÅŸ"
                            # Risk seviyesi tespiti - Config'den threshold kullan
                            volatility = stock_data['Close'].pct_change().std() * 100
                            if volatility > ML_MODEL_PARAMS.get("default_volatility", 3.0):
                                risk_level = "YÃ¼ksek"
                            elif volatility > (ML_MODEL_PARAMS.get("default_volatility", 3.0) / 2):
                                risk_level = "Orta"
                            else:
                                risk_level = "DÃ¼ÅŸÃ¼k"
                            # Analiz sonuÃ§larÄ±nÄ± kaydet
                            ai_analysis_result = {
                                "symbol": stock_symbol,
                                "company_name": company_info.get("name", ""),
                                "last_price": last_price,
                                "price_change": price_change,
                                "recommendation": "AI Analiz",
                                "trend": trend_direction,
                                "risk_level": risk_level,
                                "analysis_summary": analysis_result,
                                "analysis_type": "ai"
                            }
                            save_analysis_result(
                                symbol=stock_symbol, 
                                analysis_type="ai", 
                                price=last_price, 
                                result_data=ai_analysis_result, 
                                indicators=None, 
                                notes=analysis_result
                            )
                    else:
                        with results_container:
                            st.error(f"{stock_symbol} iÃ§in veri alÄ±namadÄ±.")
                
                except Exception as e:
                    with results_container:
                        st.error(f"Hisse analizi sÄ±rasÄ±nda bir hata oluÅŸtu: {str(e)}")
                    with log_expander:
                        st.error(f"Hata detayÄ±: {str(e)}")
    
    with ai_tabs[2]:
        st.subheader("Fiyat Tahmini")
        st.markdown("Yapay zeka, seÃ§tiÄŸiniz hisse senedi iÃ§in kÄ±sa ve orta vadeli fiyat tahminleri yapar.")
        
        # Config'den default stock al
        default_price_stock = ML_MODEL_PARAMS.get("default_stock", "THYAO")
        if not default_price_stock.endswith('.IS'):
            default_price_stock += '.IS'
            
        price_symbol = st.text_input("Hisse Senedi SembolÃ¼", value=default_price_stock, key="ai_price_symbol")
        price_symbol = price_symbol.upper()
        if not price_symbol.endswith('.IS') and not price_symbol == "":
            price_symbol += '.IS'
        
        if st.button("Fiyat Tahmini", type="primary", key="price_prediction"):
            with st.spinner(f"{price_symbol} iÃ§in fiyat tahmini yapÄ±lÄ±yor..."):
                try:
                    # Hisse verilerini al - Config'den period kullan
                    data_period = FORECAST_PERIODS.get("6ay", {}).get("period", "6mo")
                    price_data = get_stock_data(price_symbol, period=data_period)
                    
                    if price_data is not None and not price_data.empty:
                        # GÃ¶stergeleri hesapla
                        try:
                            price_data_with_indicators = calculate_indicators(price_data)
                            # Tahmini Ã§alÄ±ÅŸtÄ±r
                            try:
                                prediction_result = ai_price_prediction(gemini_pro, price_symbol, price_data_with_indicators)
                                # Return deÄŸerini kontrol et - tuple mu string mi?
                                if isinstance(prediction_result, tuple):
                                    prediction_text, prediction_data = prediction_result
                                else:
                                    prediction_text = prediction_result
                                    prediction_data = None
                                # BoÅŸ result kontrolÃ¼
                                if not prediction_text or prediction_text.strip() == "":
                                    prediction_text = f"{price_symbol} iÃ§in fiyat tahmini tamamlanamadÄ±."
                            except Exception as ai_error:
                                log_exception(ai_error, "AI fiyat tahmini sÄ±rasÄ±nda hata")
                                prediction_text = f"{price_symbol} iÃ§in fiyat tahmini ÅŸu anda yapÄ±lamÄ±yor."
                                prediction_data = None
                        except Exception as indicator_error:
                            log_exception(indicator_error, "Fiyat tahmini gÃ¶stergeleri hesaplanÄ±rken hata")
                            st.error(f"GÃ¶stergeler hesaplanÄ±rken hata: {str(indicator_error)}")
                            return
                        # SonuÃ§larÄ± gÃ¶ster
                        st.markdown(f"""
                        <div style="background-color:#f0f7ff; padding:15px; border-radius:10px; border-left:5px solid #0066ff;">
                        {prediction_text}
                        </div>
                        """, unsafe_allow_html=True)
                        # EÄŸer fallback sonuÃ§lar varsa (API baÄŸlantÄ±sÄ± yoksa), tahmin grafiÄŸi gÃ¶ster
                        if prediction_data:
                            st.subheader("Tahmin GrafiÄŸi")
                            # Tahmin verilerini hazÄ±rla
                            current_price = prediction_data['current_price']
                            future_dates = []
                            future_prices = []
                            # Config'den tahmin gÃ¼n sayÄ±sÄ±nÄ± al
                            forecast_days = ML_MODEL_PARAMS.get("chart_history_days", 30)
                            target_price = prediction_data['predicted_price_30d']
                            # Gelecek tarihleri oluÅŸtur
                            last_date = price_data.index[-1]
                            for i in range(1, forecast_days + 1):
                                if isinstance(last_date, pd.Timestamp):
                                    future_date = last_date + pd.Timedelta(days=i)
                                else:
                                    future_date = datetime.now() + timedelta(days=i)
                                future_dates.append(future_date)
                            # Fiyat tahmini yap
                            for i in range(forecast_days):
                                progress = i / (forecast_days - 1)  # 0 to 1
                                # Basit doÄŸrusal enterpolasyon
                                day_price = current_price + (target_price - current_price) * progress
                                # Rastgele dalgalanmalar ekle
                                random_factor = np.random.uniform(-1, 1) * prediction_data['confidence'] / 500
                                day_price = day_price * (1 + random_factor)
                                future_prices.append(day_price)
                            # Tahmin grafiÄŸini oluÅŸtur
                            try:
                                fig, ax = plt.subplots(figsize=(10, 6))
                                # GeÃ§miÅŸ veri - Config'den history days kullan
                                history_days = ML_MODEL_PARAMS.get("chart_history_days", 30)
                                ax.plot(price_data.index[-history_days:], price_data['Close'].iloc[-history_days:], 
                                       label='GeÃ§miÅŸ Veri', color='blue')
                                # Gelecek tahmin
                                ax.plot(future_dates, future_prices, label='YZ Tahmini', 
                                       color='green' if target_price > current_price else 'red', 
                                       linestyle='--')
                                # Destek ve direnÃ§ Ã§izgileri
                                ax.axhline(y=prediction_data['support_level'], color='green', linestyle=':', 
                                          label=f"Destek: {prediction_data['support_level']:.2f}")
                                ax.axhline(y=prediction_data['resistance_level'], color='red', linestyle=':', 
                                          label=f"DirenÃ§: {prediction_data['resistance_level']:.2f}")
                                ax.set_title(f"{price_symbol} Yapay Zeka Fiyat Tahmini")
                                ax.set_xlabel('Tarih')
                                ax.set_ylabel('Fiyat (TL)')
                                ax.grid(True, alpha=0.3)
                                ax.legend()
                                # GrafiÄŸi gÃ¶ster
                                st.pyplot(fig)
                                # Memory leak'i Ã¶nlemek iÃ§in figÃ¼r'Ã¼ kapat
                                plt.close(fig)
                            except Exception as chart_error:
                                log_exception(chart_error, "Tahmin grafiÄŸi oluÅŸturulurken hata")
                                st.warning("Tahmin grafiÄŸi gÃ¶sterilemedi, ancak analiz tamamlandÄ±.")
                                # Hata durumunda da figÃ¼r'Ã¼ kapat
                                try:
                                    plt.close(fig)
                                except:
                                    pass
                        # Ana grafiÄŸi gÃ¶ster
                        try:
                            fig = create_stock_chart(price_data_with_indicators, price_symbol)
                            st.plotly_chart(fig, use_container_width=True)
                        except Exception as chart_error:
                            log_exception(chart_error, "Ana grafik oluÅŸturulurken hata")
                            st.warning("Grafik gÃ¶sterilemedi, ancak analiz tamamlandÄ±.")
                    else:
                        st.error(f"{price_symbol} iÃ§in veri alÄ±namadÄ±.")
                
                except Exception as e:
                    log_exception(e, "Fiyat tahmini sÄ±rasÄ±nda hata")
                    st.error(f"Fiyat tahmini sÄ±rasÄ±nda bir hata oluÅŸtu: {str(e)}")
    
    with ai_tabs[3]:
        st.subheader("SektÃ¶r Analizi")
        st.markdown("SeÃ§tiÄŸiniz hisse senedinin bulunduÄŸu sektÃ¶r iÃ§in yapay zeka analizi yapar.")
        
        # Config'den default stock al
        default_sector_stock = ML_MODEL_PARAMS.get("default_stock", "THYAO")
        if not default_sector_stock.endswith('.IS'):
            default_sector_stock += '.IS'
            
        sector_symbol = st.text_input("Hisse Senedi SembolÃ¼", value=default_sector_stock, key="ai_sector_symbol")
        sector_symbol = sector_symbol.upper()
        if not sector_symbol.endswith('.IS') and not sector_symbol == "":
            sector_symbol += '.IS'
        
        if st.button("SektÃ¶r Analizi", type="primary", key="sector_analysis"):
            with st.spinner(f"{sector_symbol} iÃ§in sektÃ¶r analizi yapÄ±lÄ±yor..."):
                try:
                    # Analizi Ã§alÄ±ÅŸtÄ±r
                    sector_result = ai_sector_analysis(gemini_pro, sector_symbol)
                    
                    # Return deÄŸerini kontrol et - tuple mu string mi?
                    if isinstance(sector_result, tuple):
                        sector_text, sector_data = sector_result
                    else:
                        sector_text = sector_result
                        sector_data = None
                        
                    # BoÅŸ result kontrolÃ¼
                    if not sector_text or sector_text.strip() == "":
                        sector_text = f"{sector_symbol} iÃ§in sektÃ¶r analizi tamamlanamadÄ±."
                    
                    # SonuÃ§larÄ± gÃ¶ster
                    st.markdown(f"""
                    <div style="background-color:#f0f7ff; padding:15px; border-radius:10px; border-left:5px solid #0066ff;">
                    {sector_text}
                    </div>
                    """, unsafe_allow_html=True)
                    
                    # EÄŸer fallback sonuÃ§lar varsa (API baÄŸlantÄ±sÄ± yoksa), gÃ¶rselleri gÃ¶ster
                    if sector_data:
                        col1, col2, col3 = st.columns(3)
                        
                        with col1:
                            outlook = sector_data['outlook']
                            outlook_color = "green" if outlook == "Olumlu" else ("red" if outlook == "Olumsuz" else "orange")
                            st.markdown(f"<h4 style='text-align: center; color: {outlook_color};'>{outlook}</h4>", unsafe_allow_html=True)
                            st.markdown("<p style='text-align: center;'>SektÃ¶r GÃ¶rÃ¼nÃ¼mÃ¼</p>", unsafe_allow_html=True)
                        
                        with col2:
                            strength = sector_data['strength']
                            strength_color = "green" if strength > 70 else ("orange" if strength > 40 else "red")
                            st.markdown(f"<h4 style='text-align: center; color: {strength_color};'>%{strength}</h4>", unsafe_allow_html=True)
                            st.markdown("<p style='text-align: center;'>SektÃ¶r GÃ¼cÃ¼</p>", unsafe_allow_html=True)
                        
                        with col3:
                            trend = sector_data['trend']
                            trend_color = "green" if trend == "YÃ¼kseliÅŸ" else ("red" if trend == "DÃ¼ÅŸÃ¼ÅŸ" else "orange")
                            st.markdown(f"<h4 style='text-align: center; color: {trend_color};'>{trend}</h4>", unsafe_allow_html=True)
                            st.markdown("<p style='text-align: center;'>SektÃ¶r Trendi</p>", unsafe_allow_html=True)
                except Exception as e:
                    log_exception(e, "SektÃ¶r analizi sÄ±rasÄ±nda hata")
                    st.error(f"SektÃ¶r analizi sÄ±rasÄ±nda bir hata oluÅŸtu: {str(e)}")
                    # Fallback sonuÃ§larÄ± gÃ¶ster
                    st.markdown(f"""
                    <div style="background-color:#fff7f0; padding:15px; border-radius:10px; border-left:5px solid #ff9900;">
                    {sector_symbol} iÃ§in sektÃ¶r analizi ÅŸu anda yapÄ±lamÄ±yor. LÃ¼tfen daha sonra tekrar deneyin.
                    </div>
                    """, unsafe_allow_html=True)
    
    with ai_tabs[4]:
        st.subheader("PortfÃ¶y Ã–nerileri")
        st.markdown("Yapay zeka, yatÄ±rÄ±m bÃ¼tÃ§enize ve risk profilinize gÃ¶re portfÃ¶y Ã¶nerisi oluÅŸturur.")
        
        # Config'den min/max budget deÄŸerleri al
        min_budget = ML_MODEL_PARAMS.get("min_budget", 1000)
        max_budget = ML_MODEL_PARAMS.get("max_budget", 10000000)
        default_budget = ML_MODEL_PARAMS.get("default_budget", 10000)
        
        budget = st.number_input("YatÄ±rÄ±m BÃ¼tÃ§esi (TL)", 
                                min_value=min_budget, 
                                max_value=max_budget, 
                                value=default_budget, 
                                step=1000)
        
        if st.button("PortfÃ¶y Ã–nerisi", type="primary", key="portfolio_recommendation"):
            with st.spinner("PortfÃ¶y Ã¶nerisi oluÅŸturuluyor..."):
                try:
                    # Ã–neriyi Ã§alÄ±ÅŸtÄ±r
                    portfolio_result = ai_portfolio_recommendation(gemini_pro, budget)
                    
                    # Return deÄŸerini kontrol et
                    if not portfolio_result or portfolio_result.strip() == "":
                        portfolio_result = f"{budget:,} TL bÃ¼tÃ§e iÃ§in portfÃ¶y Ã¶nerisi tamamlanamadÄ±."
                    
                    # SonuÃ§larÄ± gÃ¶ster
                    st.markdown(f"""
                    <div style="background-color:#f0f7ff; padding:15px; border-radius:10px; border-left:5px solid #0066ff;">
                    {portfolio_result}
                    </div>
                    """, unsafe_allow_html=True)
                    
                    st.warning("Bu Ã¶neri bir yatÄ±rÄ±m tavsiyesi niteliÄŸi taÅŸÄ±maz, sadece eÄŸitim amaÃ§lÄ±dÄ±r.")
                    
                except Exception as e:
                    log_exception(e, "PortfÃ¶y Ã¶nerisi oluÅŸturulurken hata")
                    st.error(f"PortfÃ¶y Ã¶nerisi oluÅŸturulurken bir hata oluÅŸtu: {str(e)}")
                    # Fallback Ã¶nerisi gÃ¶ster
                    st.markdown(f"""
                    <div style="background-color:#fff7f0; padding:15px; border-radius:10px; border-left:5px solid #ff9900;">
                    {budget:,} TL bÃ¼tÃ§e iÃ§in portfÃ¶y Ã¶nerisi ÅŸu anda oluÅŸturulamÄ±yor. LÃ¼tfen daha sonra tekrar deneyin.
                    </div>
                    """, unsafe_allow_html=True)
    
    with ai_tabs[5]:
        st.subheader("Teknik Analiz Yorumlama")
        st.markdown("Yapay zeka, teknik gÃ¶stergeleri yorumlayarak alÄ±m/satÄ±m sinyallerini deÄŸerlendirir.")
        
        # Config'den default stock al
        default_ta_stock = ML_MODEL_PARAMS.get("default_stock", "THYAO")
        if not default_ta_stock.endswith('.IS'):
            default_ta_stock += '.IS'
            
        ta_symbol = st.text_input("Hisse Senedi SembolÃ¼", value=default_ta_stock, key="ai_ta_symbol")
        ta_symbol = ta_symbol.upper()
        if not ta_symbol.endswith('.IS') and not ta_symbol == "":
            ta_symbol += '.IS'
        
        if st.button("Teknik Analiz", type="primary", key="technical_analysis"):
            with st.spinner(f"{ta_symbol} iÃ§in teknik analiz yapÄ±lÄ±yor..."):
                try:
                    # Hisse verilerini al - Config'den period kullan
                    data_period = FORECAST_PERIODS.get("6ay", {}).get("period", "6mo")
                    ta_data = get_stock_data(ta_symbol, period=data_period)
                    
                    if ta_data is not None and not ta_data.empty:
                        # GÃ¶stergeleri hesapla
                        try:
                            ta_data_with_indicators = calculate_indicators(ta_data)
                            # Analizi Ã§alÄ±ÅŸtÄ±r
                            try:
                                interpretation = ai_technical_interpretation(gemini_pro, ta_symbol, ta_data_with_indicators)
                                # Return deÄŸerini kontrol et
                                if not interpretation or interpretation.strip() == "":
                                    interpretation = f"{ta_symbol} iÃ§in teknik analiz yorumu tamamlanamadÄ±."
                            except Exception as ai_error:
                                log_exception(ai_error, "AI teknik analiz yorumu sÄ±rasÄ±nda hata")
                                interpretation = f"{ta_symbol} iÃ§in teknik analiz yorumu ÅŸu anda yapÄ±lamÄ±yor. Temel grafik aÅŸaÄŸÄ±da gÃ¶sterilmektedir."
                        except Exception as indicator_error:
                            log_exception(indicator_error, "Teknik analiz gÃ¶stergeleri hesaplanÄ±rken hata")
                            st.error(f"GÃ¶stergeler hesaplanÄ±rken hata: {str(indicator_error)}")
                            return
                        # SonuÃ§larÄ± gÃ¶ster
                        st.markdown(f"""
                        <div style="background-color:#f0f7ff; padding:15px; border-radius:10px; border-left:5px solid #0066ff;">
                        {interpretation}
                        </div>
                        """, unsafe_allow_html=True)
                        # GrafiÄŸi gÃ¶ster
                        try:
                            fig = create_stock_chart(ta_data_with_indicators, ta_symbol)
                            st.plotly_chart(fig, use_container_width=True)
                        except Exception as chart_error:
                            log_exception(chart_error, "Teknik analiz grafiÄŸi oluÅŸturulurken hata")
                            st.warning("Grafik gÃ¶sterilemedi, ancak analiz tamamlandÄ±.")
                    else:
                        st.error(f"{ta_symbol} iÃ§in veri alÄ±namadÄ±.")
                
                except Exception as e:
                    log_exception(e, "Teknik analiz sÄ±rasÄ±nda hata")
                    st.error(f"Teknik analiz sÄ±rasÄ±nda bir hata oluÅŸtu: {str(e)}")